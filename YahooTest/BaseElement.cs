using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System;
using System.Collections.ObjectModel;
using System.Drawing;

namespace YahooTest
{
    public class BaseElement : IWebElement
    {
        protected string Name;        protected By Locator;        protected IWebElement Element;        public BaseElement(By locator, string name)        {            this.WaitForIsVisible();            this.Locator = locator;            this.Name = name == "" ? this.GetText() : name;        }        public BaseElement(By locator)        {            this.Locator = locator;        }        public string GetText()        {            this.WaitForIsVisible();            return this.Element.Text;        }        public IWebElement GetElement()        {            try            {                this.Element = Browser.GetDriver().FindElement(this.Locator);            }            catch (Exception)            {                throw;            }            return this.Element;        }        public void WaitForIsVisible()        {            Browser.GetDriver().Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(15);        }        public void SendKeys(string text)        {            this.WaitForIsVisible();            Browser.GetDriver().FindElement(this.Locator).SendKeys(text);        }        public void Submit()        {            this.WaitForIsVisible();            Browser.GetDriver().FindElement(this.Locator).Submit();        }        public void Click()        {            this.WaitForIsVisible();            Browser.GetDriver().FindElement(this.Locator).Click();        }        public void JsClick()        {            this.WaitForIsVisible();            IJavaScriptExecutor executor = (IJavaScriptExecutor)Browser.GetDriver();            executor.ExecuteScript("arguments[0].click();", this.GetElement());        }        public void JsHighLighter()        {            this.WaitForIsVisible();            IJavaScriptExecutor executor = (IJavaScriptExecutor)Browser.GetDriver();            executor.ExecuteScript(@"arguments[0].style.cssText = ""border-width: 2px; border-style: solid; border-color: red"";", this.GetElement());        }        public void ContextActClick()        {            var act = new Actions(Browser.GetDriver());            this.WaitForIsVisible();            act.ContextClick(FindElement(this.Locator)).Build().Perform();        }        public string GetAttribute(string attributeName)        {            this.WaitForIsVisible();            return Browser.GetDriver().FindElement(this.Locator).GetAttribute(attributeName);        }        public string GetCssValue(string propertyName)        {            this.WaitForIsVisible();            return Browser.GetDriver().FindElement(this.Locator).GetCssValue(propertyName);        }        public string GetProperty(string propertyName)        {            this.WaitForIsVisible();            return Browser.GetDriver().FindElement(this.Locator).GetProperty(propertyName);        }        public void Clear()        {            this.WaitForIsVisible();            Browser.GetDriver().FindElement(this.Locator).Clear();        }        public IWebElement FindElement(By by)        {            return Browser.GetDriver().FindElement(this.Locator);        }        public ReadOnlyCollection<IWebElement> FindElements(By by)        {            this.WaitForIsVisible();            return this.FindElements(this.Locator);        }        public bool IsElementPresent()        {            try            {                this.WaitForIsVisible();                this.FindElement(this.Locator);                return true;            }            catch (NoSuchElementException e)            {                return false;            }        }        public bool IsElementPresentWithoutWaiter()        {            try            {                this.FindElement(this.Locator);                return true;            }            catch (NoSuchElementException e)            {                return false;            }        }        public void Dispote()        {            Browser.GetDriver().Close();        }        public string TagName { get; }        public string Text { get; }        public bool Enabled { get; }        public bool Selected { get; }        public Point Location { get; }        public Size Size { get; }        public bool Displayed { get; }
    }
}
